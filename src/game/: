#include <algorithm>
#include <array>
#include <memory>
#include <utility>
#include "cards.h"

using unique_ptr_pair = std::pair<std::unique_ptr<Card>, std::unique_ptr<Card>>;

enum class HandEval {
	Nothing = 0,
	OnePair = 1,
	TwoPair = 2,
	ThreeOfAKind = 3,
	Straight = 4, 
	Flush = 5,
	FullHouse = 6,
	FourOfAKind = 7,
	StraightFlush = 8,
	RoyalFlush = 9
};

class Player {
	private:
	using color_arr_type = std::array<int, 4>;
	using values_arr_type = std::array<int, 15>;
	
	private:
	std::unique_ptr<Card> card1, card2;
	int cash;

	private:
	HandEval hand_evaluation;
	int pairs;
	int streak, start, end; // For straight and flush
	int threes;
	bool four, same_colour;

	public:
	Player() : hand_evaluation(HandEval::Nothing),
			   pairs(0),
			   threes(0),
			   four(false),
			   same_colour(false),
			   streak(0),
			   start(0),
			   end(0)
	{} 

	private:
	bool royal_flush(values_arr_type &values_arr) {
		if (streak < 5) {
			return false;
		}

		if (start == 10 and end != 14) {
			return false;
		}
	}

	public:
	void evaluate_hand(color_arr_type color_arr, values_arr_type values_arr) {
		values_arr.at(card1->get_value())++;	
		values_arr.at(card2->get_value())++;	
		
		color_arr.at(static_cast<int>(card1->get_color()))++;
		color_arr.at(static_cast<int>(card2->get_color()))++;
		
		int curr_streak = 0;
		for (auto &value : values_arr) {
			if (value >= 1) { 
				curr_streak++;	
			} else {
				curr_streak = 0;
			}
			
			streak = std::max(streak, curr_streak); // Here because flush 
													// can have ace 
			switch (value) {
				case 2:
					pairs++;
					break;
				case 3:
					threes++;
					break;
				case 4:
					four = true;
					break;
			}			
		}

		for (auto &colour : color_arr) {
			if (colour >= 5) {
				same_colour = true;
				break;
			}
		}
		

	}

	HandEval get_hand_evaluation() {
		return hand_evaluation;
	}

	public:
	void assign_cards(std::unique_ptr<Card> card1, std::unique_ptr<Card> card2) {
		this->card1 = std::move(card1);
		this->card2 = std::move(card2);
	}

	public:
	unique_ptr_pair return_cards() {
		return std::make_pair(std::move(card1), std::move(card2));
	}
};

